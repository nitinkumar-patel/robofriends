{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","count","nextProps","nextState","this","color","onClick","Component","Header","ErrorBoundry","hasError","info","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initalStateSearch","initalStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.52071ebf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nfunction Card({name, email, id}) {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw22 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    // const cardArray = robots.map((user, i) => {\n    //     return <Card \n    //     id={robots[i].id} \n    //     name={robots[i].name} \n    //     email={robots[i].email}/>\n    // })\n    return (\n    <div>\n        {/* { cardArray } */}\n        {\n            robots.map((user, i) => {\n                return <Card \n                            key={i}\n                            id={robots[i].id} \n                            name={robots[i].name} \n                            email={robots[i].email}/>\n            })\n        }\n    </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                aria-label='Search Robot'\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}/>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n            { props.children }\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count) {\n            return true\n        }\n        return false\n    }\n\n    updateCount = () => {\n        this.setState(state => { \n            return {count: state.count + 1 }   \n        })\n    }\n\n    render() {\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count} </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton'\n\nclass Header extends Component {\n    render() {\n        return (\n            <div>\n                <h1 className='f1'> RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends React.Component {\n    componentDidMount() {\n        // console.log(this.props.store.getState())\n        this.props.onRequestRobots();\n    }\n    \n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        // console.log('render');\n        return isPending ? \n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry> \n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type:REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initalStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initalStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state;\n    }\n}\n\nconst initalStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initalStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}